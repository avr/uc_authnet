<?php

/**
 * @file
 * Process payments using Authorize.net. Supports AIM
 *
 */

define('UC_AUTHORIZENET_TEST_GATEWAY_URL', 'https://test.authorize.net/gateway/transact.dll');
define('UC_AUTHORIZENET_LIVE_GATEWAY_URL', 'https://secure.authorize.net/gateway/transact.dll');

/**
 * Implementation of hook_menu().
 */
function uc_authnet_menu() {
  $items = array();

  return $items;
}

/**
 * Implementation of hook_payment_gateway().
 */
function uc_authnet_payment_gateway() {
  $gateways[] = array(
    'id' => 'authorizenet',
    'title' => t('Authorize.net'),
    'description' => t('Process credit card payments using the AIM service of Authorize.net.'),
    'settings' => 'uc_authnet_settings_form', // defined in uc_authnet.admin.php
    'credit' => 'uc_authnet_process',
    'credit_txn_types' => array(
      UC_CREDIT_AUTH_ONLY,
      UC_CREDIT_PRIOR_AUTH_CAPTURE,
      UC_CREDIT_AUTH_CAPTURE,
      UC_CREDIT_REFERENCE_SET,
      UC_CREDIT_REFERENCE_TXN
    ),
    'echeck' => 'uc_authnet_process',
  );
  return $gateways;
}

/**
 * Implementation of hook_recurring_info().
 */
function uc_recurring_uc_authorizenet_recurring_info() {
  $items['authnet_cim'] = array(
    'name' => t('Authorize.net (CIM)'),
    'payment method' => 'credit',
    'module' => 'uc_authnet',
    'fee handler' => 'authnet_cim',
    'renew callback' => 'uc_authnet_cim_renew',
    'process callback' => 'uc_authnet_cim_process',
    'saved profile' => TRUE,
    'menu' => array(
      'charge' => UC_RECURRING_MENU_DEFAULT,
      'edit'   => UC_RECURRING_MENU_DEFAULT,
      'update' => array(
        'title' => 'Update Account Details',
        'page arguments' => array('uc_recurring_authorizenet_cim_update_form'),
        'file' => 'includes/uc_recurring.uc_authorizenet.inc',
      ),
      'profile' => array(
        'title' => 'CIM Profile',
        'page arguments' => array('uc_recurring_authorizenet_cim_profile_form'),
        'access callback' => 'user_access',
        'access arguments' => array('administer recurring fees'),
        'file' => 'includes/uc_recurring.uc_authorizenet.inc',
      ),
      'cancel' => UC_RECURRING_MENU_DEFAULT,
    ), // Use the default user operation defined in uc_recurring.
  );

  if (variable_get('uc_authnet_cim_mode', 'disabled') != 'disabled') {
    $items['authorizenet'] = $items['authorizenet_cim'];
  }
  return $items;
}


/**
 * Load the required files/classes to use the authnet php sdk.
 */
function uc_authnet_setup() {
  require_once 'anet_php_sdk/AuthorizeNet.php';
  define("AUTHORIZENET_API_LOGIN_ID", variable_get('uc_authnet_api_login_id', ''));
  define("AUTHORIZENET_TRANSACTION_KEY", variable_get('uc_authnet_api_transaction_key', ''));
  
  if (variable_get('uc_authnet_aim_txn_mode', '') == 'developer_test') {
    define("AUTHORIZENET_SANDBOX", true);
  }
}

/**
 * Returns the gateway settings form
 */
function uc_authnet_settings_form() {
  module_load_include('inc', 'uc_authnet', 'uc_authnet.admin');
  return _uc_authnet_settings_form();
}

// Main handler for processing credit card transactions.
function uc_authnet_process($order_id, $amount, $data) {
  
  // Load the order.
  $order = uc_order_load($order_id);

  // Perform the appropriate action based on the transaction type.
  switch ($data['txn_type']) {
    
    // Reference transactions are handled through Authorize.Net's CIM.
    case UC_CREDIT_REFERENCE_TXN:
      return _uc_authnet_cim_profile_charge($order, $amount, $data);

    // Set a reference only.
    case UC_CREDIT_REFERENCE_SET:
      // Return the error message if this failed.
      if ($message = _uc_authnet_cim_profile_create($order)) {
        return array('success' => FALSE, 'message' => $message);
      }
      else {
        return array('success' => TRUE, 'message' => t('New customer profile created successfully at Authorize.Net.'));
      }

    // Accommodate all other transaction types.
    default:
      return _uc_authnet_process($order, $amount, $data);
  }
}

/**
 * Set up the recurring fee by creating a CIM profile for future payments
 *
 * @param $order
 *   The order object.
 * @param $fee
 *   The fee object.
 * @return
 *   TRUE if recurring fee setup
 */
function uc_authnet_cim_process($order, &$fee) {
  $fee->fee_handler = 'authorizenet_cim';
  if (variable_get('uc_authnet_cim_profile', FALSE) == FALSE) {
    $data = array(
      'txn_type' => UC_CREDIT_REFERENCE_SET,
    );
    return uc_authnet_process($order->order_id, $order->total_amount, $data);
  }
  return TRUE;
}


/**
 * Create a CIM profile using an order's data.
 */
function _uc_authnet_cim_profile_create($order) {
  // Build the request.
  $customerProfile = _uc_authnet_cim_profile_create_request($order);

  $request = new AuthorizeNetCIM;
  if (variable_get('uc_authnet_aim_txn_mode', '')) {
    $request->setSandbox(true);
  };

  $response = $request->createCustomerProfile($customerProfile);
  // Parse the response.
  if ($response->resultCode == 'Error') {
    uc_order_comment_save(
      $order->order_id, 0,
      t('Authorize.Net: Creating CIM profile failed.<br />@error - @text',
        array('@error' => $response->reason_code, '@text' => $response->response_reason_text)
      ),
      'admin');
    return $response->response_reason_text;
  }
  else {
    uc_order_comment_save($order->order_id, 0, t('Authorize.Net: CIM profile created - @id', array('@id' => $response['customerProfileId'])));
  }

  // Save the new credit reference to the db.
  $order->data = uc_credit_log_reference($order->order_id, $response['customerProfileId'], $order->payment_details['cc_number']);

  return '';
}

/**
 * Helper to create the CIM profile creation request.
 */
function _uc_authnet_cim_profile_create_request($order) {
  uc_authnet_setup();

  $customerProfile = new AuthorizeNetCustomer;
  $customerProfile->description = substr(t('Order @order taking place at @date', array('@order' => $order->order_id, '@date' => format_date(time()))), 0, 255);
  $customerProfile->merchantCustomerId = substr($order->uid, 0, 20);
  $customerProfile->email = substr($order->primary_email, 0, 255);

  // Add payment profile.
  $paymentProfile = new AuthorizeNetPaymentProfile;
  $paymentProfile->customerType = "individual";
  $paymentProfile->billto = _uc_authnet_billto($order);
  $paymentProfile->payment->creditCard->cardNumber = $order->payment_details['cc_number'];
  $paymentProfile->payment->creditCard->expirationDate = $order->payment_details['cc_exp_year'] .'-'. str_pad($order->payment_details['cc_exp_month'], 2, '0', STR_PAD_LEFT);
  $customerProfile->paymentProfiles[] = $paymentProfile;
  
  // Add shipping information
  $customerProfile->shipToList[] = _uc_authnet_shipto($order);

  return $customerProfile;
}

/**
 * Use a reference to charge to a CIM profile.
 */
function _uc_authnet_cim_profile_charge($order, $amount, $data) {
  global $user;
  $server = variable_get('uc_authnet_cim_mode', 'disabled');

  // Help build the request.
  $request = _uc_authorizenet_cim_profile_charge_request($order, $amount, $data);

  // Check error state.
  if (array_key_exists('errorCode', $request)) {
    $comment[] = $request['text'];
    $result = array(
      'success' => FALSE,
    );
  }

  // Request went off smooth.
  else {

    // Request a profile from auth.net.
    $xml = _uc_authorizenet_xml_api_wrapper('createCustomerProfileTransactionRequest', _uc_authorizenet_array_to_xml($request));

    // Parse the response.
    $response = _uc_authorizenet_cim_parse_response(uc_authorizenet_xml_api($server, $xml));

    // Error state.
    if ($response['resultCode'] == 'Error') {
      $result = array(
        'success' => FALSE,
      );
      $comment[] = '('. $response['resultCode'] .': '. $response['text'] .')';
    }

    // Transaction succeeded.
    else {
      $result = array(
        'success' => TRUE,
      );

      // Build info message.
      $types = uc_credit_transaction_types();
      $context = array(
        'revision' => 'formatted-original',
        'type' => 'amount',
      );
      $comment[] = t('<b>@type:</b> @amount', array('@type' => $types[$data['txn_type']], '@amount' => uc_price($amount, $context)));

      // Save a comment to the order.
      uc_order_comment_save($order->order_id, $user->uid, implode('<br />', $comment), 'admin');
    }
  }

  // Build the response to the payment gateway API.
  return $result + array(
    'comment' => implode(', ', $comment),
    'message' => implode('<br />', $comment),
    'uid' => $user->uid,
  );
}

/**
 * Helper for building the request for a CIM profile charge.
 */
// function _uc_authnet_cim_profile_charge_request($order, $amount, $data) {
//   $profile = _uc_authorizenet_cim_profile_get($order, $data['ref_id']);
//   if ($profile['resultCode'] == 'Error') {
//     return $profile;
//   }
//   else {
//     return array(
//       'refId' => substr($order->order_id .'-'. time(), 0, 20),
//       'transaction' => array(
//         'profileTransAuthCapture' => array(
//           'amount' => $amount,
//           'customerProfileId' => $profile['customerProfileId'],
//           'customerPaymentProfileId' => $profile['customerPaymentProfileId'],
//           'order' => array(
//             'invoiceNumber' => $order->order_id,
//           ),
//         ),
//       ),
//     );
//   }
// }

/**
 * Get a CIM profile stored at Authorize.Net.
 */
// function _uc_authorizenet_cim_profile_get($order, $profile_id) {
//   $server = variable_get('uc_authnet_cim_mode', 'disabled');
//   $request = array(
//     'customerProfileId' => $profile_id,
//   );
// 
//   // Request a profile from auth.net.
//   $xml = _uc_authorizenet_xml_api_wrapper('getCustomerProfileRequest', _uc_authorizenet_array_to_xml($request));
// 
//   // Parse the response.
//   $response = _uc_authorizenet_cim_parse_response(uc_authorizenet_xml_api($server, $xml));
// 
//   return $response;
// }

/**
 * Get a CIM payment profile stored at auth.net.
 */
// function _uc_authorizenet_cim_payment_profile_get($order, $profile_id, $payment_profile_id) {
//   $server = variable_get('uc_authnet_cim_mode', 'disabled');
//   $request = array(
//     'customerProfileId' => $profile_id,
//   );
// 
//   // Request a profile from auth.net.
//   $xml = _uc_authorizenet_xml_api_wrapper('getCustomerPaymentProfileRequest', _uc_authorizenet_array_to_xml($request));
//   // Parse the response.
//   $response = _uc_authorizenet_cim_parse_response(uc_authorizenet_xml_api($server, $xml));
//   return $response['resultCode'] == 'Error' ? FALSE : $response;
// }

/**
 * Handles authorizations and captures through AIM at Authorize.Net
 */
function _uc_authnet_process($order, $amount, $data) {
  global $user;

  uc_authnet_setup();

  $request = new AuthorizeNetAIM;

  if (variable_get('uc_authnet_aim_txn_mode', '')) {
    $request->setSandbox(true);
  };
  
  $context = array(
    'revision' => 'formatted-original',
    'type' => 'amount',
  );
  $options = array(
    'sign' => FALSE,
    'thou' => FALSE,
    'dec' => '.',
  );
  
  // Build the line items for logging in Auth.Net.
  foreach ($order->products as $product) {
    // dpm($product);
    $request->addLineItem(
      $product->model, // item_id
      $product->title, // item_name
      '', // item_description
      $product->qty, // item_quantity
      uc_price($product->price, $context, $options), // $item_unit_price
      'N' // $item_taxable
    );
  };

  $billing_country = uc_get_country_data(array('country_id' => $order->billing_country));
  $delivery_country = uc_get_country_data(array('country_id' => $order->delivery_country));

  // Build the data for the transaction.
  
  // Order Information
  $request->invoice_num = $order->order_id;
  $request->description = 'Online Gift from ' . $_SERVER['HTTP_HOST'];
  $request->amount = uc_price($amount, $context, $options);
  
  // Payment Method information
  // If Credit Card
  if ($order->payment_method == 'credit'){
    $request->method = 'CC';
    $request->card_num = $order->payment_details['cc_number'];
    $request->exp_date = $order->payment_details['cc_exp_month'] .'/'. $order->payment_details['cc_exp_year'];
    $request->card_code = $order->payment_details['cc_cvv'];
  }
  
  // If eCheck
  if ($order->payment_method == 'echeck'){
    $request->method = 'echeck';
    $request->bank_aba_code = $order->payment_details['echeck_bank_aba_code'];
    $request->bank_acct_num = $order->payment_details['echeck_bank_acct_num'];
    $request->bank_acct_type = $order->payment_details['echeck_bank_acct_type'];
    $request->bank_name = $order->payment_details['echeck_bank_name'];
    $request->bank_acct_name = $order->payment_details['echeck_bank_acct_name'];
    $request->echeck_type = 'WEB';
  }
  
  // 'duplicate_window' => variable_get('uc_authnet_duplicate_window', 120),
  
  // Customer Information
  $customer = _uc_authnet_billto($order, TRUE);
  $request->setFields($customer);
  $request->cust_id = substr($order->uid, 0, 20);
  $request->customer_ip = substr(ip_address(), 0, 15);

  $request->email_customer = variable_get('uc_authnet_aim_email_customer', FALSE) ? 'TRUE' : 'FALSE';

  // Shipping Information
  $shipping = _uc_authorize_shipto($order, TRUE);
  $request->setFields($shipping);

  $response = $request->authorizeAndCapture();
  // dsm($request);
  // dsm($response);

  if (variable_get('uc_authnet_response_debug', FALSE)) {
    watchdog('uc_authnet', 'Debug response: !data', array('!data' => '<pre>'. check_plain(print_r($response, TRUE)) .'</pre>'));
  }

  // If we didn't get an approval response code...
  if ($response->error) {
    // Fail the charge with the reason text in the decline message.
    $result = array(
      'success' => FALSE,
      'message' => t('Payment error: @message', array('@message' => $response->response_reason_text)),
      'uid' => $user->uid,
    );
    drupal_set_message('Payment Error: ' . $response->response_reason_text);
  }
  
  elseif ($response->declined) {
    // Fail the charge with the reason text in the decline message.
    $result = array(
      'success' => FALSE,
      'message' => t('Credit card payment declined: @message', array('@message' => $response->response_reason_text)),
      'uid' => $user->uid,
    );
    drupal_set_message('Payment Error: ' . $response->response_reason_text);
  }
  else {
    // Build a message for display and comments in the payments table.
    // the comment is visible on: admin/store/orders/%/payments
    $message = t('Type: @type<br />ID: @id', array('@type' => _uc_authnet_txn_type($response->transaction_type), '@id' => $response->transaction_id));
    $result = array(
      'success' => TRUE,
      'comment' => $message,
      'message' => $message,
      'data' => array('module' => 'uc_authnet', 'txn_type' => _uc_authnet_txn_type($response->transaction_type), 'txn_id' => $response->transaction_id),
      'uid' => $user->uid,
    );

    // If this was an authorization only transaction...
    if ($data['txn_type'] == UC_CREDIT_AUTH_ONLY) {
      // Log the authorization to the order.
      uc_credit_log_authorization($order->order_id, $response[6], $amount);
    }
    elseif ($data['txn_type'] == UC_CREDIT_PRIOR_AUTH_CAPTURE) {
      uc_credit_log_prior_auth_capture($order->order_id, $data['auth_id']);
    }

    // Create a transaction reference if specified in the payment gateway
    // settings and this is an appropriate transaction type.
    // if (variable_get('uc_authnet_cim_profile', FALSE) && in_array($data['txn_type'], array(UC_CREDIT_AUTH_ONLY, UC_CREDIT_AUTH_CAPTURE))) {
    //   // Ignore the returned message for now; that will appear in the comments.
    //   _uc_authorizenet_cim_profile_create($order);
    // }
  }

  // Don't log this as a payment money wasn't actually captured.
  if (in_array($data['txn_type'], array(UC_CREDIT_AUTH_ONLY))) {
    $result['log_payment'] = FALSE;
  }

  // Build an admin order comment.
  $context = array(
    'revision' => 'formatted-original',
    'type' => 'amount',
  );
  $comment = t('<b>@type</b><br /><b>@status:</b> @message<br />Amount: @amount<br />AVS response: @avs',
    array('@type' => _uc_authnet_txn_type($response->transaction_type), '@status' => $result['success'] ? t('ACCEPTED') : t('REJECTED'), '@message' => $response->response_reason_text, '@amount' => uc_price($response->amount, $context), '@avs' => _uc_authnet_avs($response->avs_response)));

  // Add the CVV response if enabled.
  if (variable_get('uc_credit_cvv_enabled', TRUE)) {
    $comment .= '<br />'. t('CVV match: @cvv', array('@cvv' => _uc_authnet_cvv($response->card_code_response)));
  }

  // Save the comment to the order.
  uc_order_comment_save($order->order_id, $user->uid, $comment, 'admin');

  return $result;
}


// Returns the message text for an AVS response code.
function _uc_authnet_avs($code) {
  $text = $code .' - ';

  switch ($code) {
    case 'A':
      $text .= t('Address (Street) matches, ZIP does not');
      break;
    case 'B':
      $text .= t('Address information not provided for AVS check');
      break;
    case 'E':
      $text .= t('AVS error');
      break;
    case 'G':
      $text .= t('Non-U.S. Card Issuing Bank');
      break;
    case 'N':
      $text .= t('No Match on Address (Street) or ZIP');
      break;
    case 'P':
      $text .= t('AVS not applicable for this transaction');
      break;
    case 'R':
      $text .= t('Retry – System unavailable or timed out');
      break;
    case 'S':
      $text .= t('Service not supported by issuer');
      break;
    case 'U':
      $text .= t('Address information is unavailable');
      break;
    case 'W':
      $text .= t('Nine digit ZIP matches, Address (Street) does not');
      break;
    case 'X':
      $text .= t('Address (Street) and nine digit ZIP match');
      break;
    case 'Y':
      $text .= t('Address (Street) and five digit ZIP match');
      break;
    case 'Z':
      $text .= t('Five digit ZIP matches, Address (Street) does not');
      break;
  }

  return $text;
}

// Returns the message text for a CVV match.
function _uc_authnet_cvv($code) {
  $text = $code .' - ';

  switch ($code) {
    case 'M':
      $text .= t('Match');
      break;
    case 'N':
      $text .= t('No Match');
      break;
    case 'P':
      $text .= t('Not Processed');
      break;
    case 'S':
      $text .= t('Should have been present');
      break;
    case 'U':
      $text .= t('Issuer unable to process request');
      break;
  }

  return $text;
}

// Returns the title of the transaction type.
function _uc_authnet_txn_type($type) {
  switch (strtoupper($type)) {
    case 'AUTH_CAPTURE':
      return t('Authorization and capture');
    case 'AUTH_ONLY':
      return t('Authorization only');
    case 'PRIOR_AUTH_CAPTURE':
      return t('Prior authorization capture');
    case 'CAPTURE_ONLY':
      return t('Capture only');
    case 'CREDIT':
      return t('Credit');
    case 'VOID':
      return t('Void');
  }
}

// Returns the Auth.Net transaction type corresponding to a UC type.
function _uc_authnet_txn_map($type) {
  switch ($type) {
    case UC_CREDIT_AUTH_ONLY:
      return 'AUTH_ONLY';
    case UC_CREDIT_PRIOR_AUTH_CAPTURE:
      return 'PRIOR_AUTH_CAPTURE';
    case UC_CREDIT_AUTH_CAPTURE:
      return 'AUTH_CAPTURE';
    case UC_CREDIT_CREDIT:
      return 'CREDIT';
    case UC_CREDIT_VOID:
      return 'VOID';
  }
}

/**
 * Map an order's billing information to an object.
 */
function _uc_authnet_billto($order, $customer = TRUE) {
  uc_authnet_setup();
  $billing_country = uc_get_country_data(array('country_id' => $order->billing_country));

  $address = new stdClass();
  $address->company = substr($order->billing_company, 0, 50);
  $address->address = substr($order->billing_street1, 0, 60);
  $address->city = substr($order->billing_city, 0, 40);
  $address->state = substr(uc_get_zone_code($order->billing_zone), 0, 2);
  $address->zip = substr($order->billing_postal_code, 0, 20);
  $address->country = !$billing_country ? '' : $billing_country[0]['country_iso_code_2'];

  if ($customer) {
    $address->phone = substr($order->billing_phone, 0, 25);
    $address->first_name = substr($order->billing_first_name, 0, 50);
    $address->last_name = substr($order->billing_last_name, 0, 50);
  }
  // For CIM profiles
  else {
    $address->firstName = substr($order->billing_first_name, 0, 50);
    $address->lastName = substr($order->billing_last_name, 0, 50);
    $address->phoneNumber = substr($order->billing_phone, 0, 25);
  }
  return $address;
}

/**
 * Map an order's shipping information to an object.
 */
function _uc_authorize_shipto($order, $customer = TRUE) {
  uc_authnet_setup();
  $delivery_country = uc_get_country_data(array('country_id' => $order->delivery_country));
  
  $address = new stdClass();
  
  if ($customer) {
    $address->phone = substr($order->billing_phone, 0, 25);
    $address->ship_to_first_name = substr($order->delivery_first_name, 0, 50);
    $address->ship_to_last_name = substr($order->delivery_last_name, 0, 50);
    $address->ship_to_company = substr($order->delivery_company, 0, 50);
    $address->ship_to_address = substr($order->delivery_street1, 0, 60);
    $address->ship_to_city = substr($order->delivery_city, 0, 40);
    $address->ship_to_state = substr(uc_get_zone_code($order->delivery_zone), 0, 2);
    $address->ship_to_zip = substr($order->delivery_postal_code, 0, 20);
    $address->ship_to_country = !$delivery_country ? '' : $delivery_country[0]['country_iso_code_2'];
  }
  // For CIM profiles
  else {
    $address->firstName = substr($order->billing_first_name, 0, 50);
    $address->lastName = substr($order->billing_last_name, 0, 50);
    $address->phoneNumber = substr($order->billing_phone, 0, 25);
  }
  
  return $address;
}

// Decrypts the login data for using Auth.Net APIs.
function _uc_authnet_login_data() {
  static $data;

  if (!empty($data)) {
    return $data;
  }

  $md5_hash = variable_get('uc_authnet_md5_hash', '');

  // If CC encryption has been configured properly.
  if ($key = uc_credit_encryption_key()) {
    // Setup our encryption object.
    $crypt = new uc_encryption_class;

    // Decrypt the MD5 Hash.
    if (!empty($md5_hash)) {
      $md5_hash = $crypt->decrypt($key, $md5_hash);
    }

    // Store any errors.
    uc_store_encryption_errors($crypt, 'uc_authnet');
  }

  $data = array(
    'md5_hash' => $md5_hash,
  );

  return $data;
}
